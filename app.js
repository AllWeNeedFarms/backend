console.log("üöÄ DEBUG VERSION - NODE-APP CONTAINER SCRIPT STARTED üöÄ");

// ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏
console.log(`[${new Date()}] NODE_ENV:`, process.env.NODE_ENV);
console.log(`[${new Date()}] PORT:`, process.env.PORT);
console.log(`[${new Date()}] MONGO_URI exists:`, !!process.env.MONGO_URI);
console.log(
  `[${new Date()}] MONGO_URI length:`,
  process.env.MONGO_URI?.length || 0
);

const express = require("express");
const app = express();

// üî• Ï†ÑÏó≠ ÏóêÎü¨ Ìï∏Îì§Îü¨ (ÏµúÏö∞ÏÑ† ÏÑ§Ï†ï)
process.on("unhandledRejection", (reason, promise) => {
  console.error(`[${new Date()}] üö® UNHANDLED PROMISE REJECTION:`, reason);
  console.error("Promise object:", promise);
  console.error("Stack trace:", reason?.stack || "No stack trace");
  // ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£åÌïòÏßÄ ÎßêÍ≥† ÏùºÎã® Î°úÍ∑∏Îßå ÎÇ®Í∏∞Í∏∞
  // process.exit(1);
});

process.on("uncaughtException", (error) => {
  console.error(`[${new Date()}] üö® UNCAUGHT EXCEPTION:`, error);
  console.error("Stack trace:", error.stack);
  // ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£åÌïòÏßÄ ÎßêÍ≥† ÏùºÎã® Î°úÍ∑∏Îßå ÎÇ®Í∏∞Í∏∞
  // process.exit(1);
});

// Express ÎØ∏Îì§Ïõ®Ïñ¥ ÏÑ§Ï†ï
app.use(express.json());

// CORS
app.use((req, res, next) => {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader(
    "Access-Control-Allow-Headers",
    "Origin, X-Requested-With, Content-Type, Accept, Authorization"
  );
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, PATCH, DELETE");
  next();
});

// Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÏóîÎìúÌè¨Ïù∏Ìä∏
app.get("/api/health", (req, res) => {
  console.log(`[${new Date()}] üíö Health check requested`);
  res.status(200).json({
    status: "healthy",
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
  });
});

// Í∞ÑÎã®Ìïú ÌÖåÏä§Ìä∏ ÏóîÎìúÌè¨Ïù∏Ìä∏
app.get("/api/test", (req, res) => {
  console.log(`[${new Date()}] üß™ Test endpoint requested`);
  res.status(200).json({
    message: "Backend is working without MongoDB",
    timestamp: new Date().toISOString(),
  });
});

// üî• MongoDB Ïó∞Í≤∞ ÏóÜÏù¥ ÏùºÎã® ÏÑúÎ≤ÑÎ∂ÄÌÑ∞ ÏãúÏûë
console.log(`[${new Date()}] üéØ SKIPPING MongoDB connection for debugging...`);

const port = process.env.PORT || 5000;
console.log(`[${new Date()}] üì° Starting Express server on port ${port}...`);

try {
  const server = app.listen(port, "0.0.0.0", () => {
    console.log(`[${new Date()}] ‚úÖ EXPRESS SERVER IS RUNNING ON PORT ${port}`);
    console.log(`[${new Date()}] üîó Server is bound to 0.0.0.0:${port}`);
    console.log(`[${new Date()}] üåê Ready to accept connections`);

    // ÏÑúÎ≤Ñ Ï£ºÏÜå Ï†ïÎ≥¥ Ï∂úÎ†•
    const address = server.address();
    console.log(`[${new Date()}] üìã Server address info:`, address);
  });

  server.on("listening", () => {
    console.log(`[${new Date()}] üéâ SERVER IS NOW LISTENING!`);
  });

  server.on("error", (error) => {
    console.error(`[${new Date()}] üö® EXPRESS SERVER ERROR:`, error);
    console.error("Error code:", error.code);
    console.error("Error message:", error.message);
    process.exit(1);
  });

  server.on("connection", (socket) => {
    console.log(`[${new Date()}] üîå New connection established`);
  });
} catch (error) {
  console.error(`[${new Date()}] üö® FAILED TO START SERVER:`, error);
  process.exit(1);
}

// 10Ï¥àÎßàÎã§ ÏÑúÎ≤Ñ ÏÉÅÌÉú Î°úÍ∑∏
setInterval(() => {
  console.log(
    `[${new Date()}] ‚ù§Ô∏è Server heartbeat - uptime: ${process.uptime()}s`
  );
}, 10000);
