name: Backend CI/CD to ECS

on:
  push:
    branches: ["main"]
    tags: ["test-**"]

# AWS ECR 주소와 리전, ECS 관련 정보를 변수로 설정하여 재사용성을 높입니다.
env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY_BACKEND: allweneedfarm-backend
  ECR_REPOSITORY_NGINX: allweneedfarm-nginx
  ECS_SERVICE: allweneedfarm-service # 4단계에서 생성한 ECS 서비스 이름
  ECS_CLUSTER: allweneedfarm-cluster # 4단계에서 생성한 ECS 클러스터 이름
  ECS_TASK_DEFINITION: task-definition.json # 아래에서 생성할 Task Definition 파일 이름
  CONTAINER_NAME_BACKEND: node-app
  CONTAINER_NAME_NGINX: nginx

jobs:
  # 테스트 잡은 이전과 동일하게 유지
  run-tests:
    name: Run Tests
    # 'test-'로 시작하는 태그가 push되었을 때만 이 잡을 실행합니다.
    # github.ref 컨텍스트는 현재 실행을 트리거한 브랜치나 태그의 전체 경로를 담고 있습니다.
    # (예: 'refs/tags/test-v1.0')
    if: startsWith(github.ref, 'refs/tags/test-')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # 테스트에는 devDependencies가 필요하므로 --production 없이 설치합니다.
      - name: Install all dependencies
        run: npm install

      # 'npm test' 스크립트를 실행합니다. (package.json에 정의되어 있어야 함)
      - name: Execute tests
        run: npm test

  build-and-deploy:
    name: Build, Push to ECR, and Deploy to ECS
    needs: run-tests
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # [변경] Docker Hub가 아닌 AWS ECR에 로그인합니다.
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # [수정] ECR_REGISTRY를 step의 output으로 명확하게 정의합니다.
      - name: Build and push backend image
        id: build-image-backend
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest" >> $GITHUB_OUTPUT
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build and push nginx image
        id: build-image-nginx
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$latest ./nginx
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$latest" >> $GITHUB_OUTPUT
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # [수정] 두 개의 컨테이너 이미지를 모두 업데이트하도록 render 단계를 분리합니다.
      - name: Render backend container in task definition
        id: render-backend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME_BACKEND }}
          image: ${{ steps.build-image-backend.outputs.image }}

      - name: Render nginx container in task definition
        id: render-nginx
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          # 이전 단계에서 백엔드 이미지가 업데이트된 task-definition을 입력으로 받습니다.
          task-definition: ${{ steps.render-backend.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_NAME_NGINX }}
          image: ${{ steps.build-image-nginx.outputs.image }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          # 최종적으로 두 이미지가 모두 업데이트된 task-definition을 배포합니다.
          task-definition: ${{ steps.render-nginx.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
