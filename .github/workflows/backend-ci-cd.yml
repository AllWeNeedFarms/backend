name: Backend CI/CD to ECS

on:
  push:
    branches: ["main"]
    tags: ["test-**"]

# AWS ECR 주소와 리전, ECS 관련 정보를 변수로 설정하여 재사용성을 높입니다.
env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY_BACKEND: allweneedfarm-backend
  ECR_REPOSITORY_NGINX: allweneedfarm-nginx
  ECS_SERVICE: allweneedfarm-service # 4단계에서 생성한 ECS 서비스 이름
  ECS_CLUSTER: allweneedfarm-cluster # 4단계에서 생성한 ECS 클러스터 이름
  ECS_TASK_DEFINITION: task-definition.json # 아래에서 생성할 Task Definition 파일 이름
  CONTAINER_NAME_BACKEND: node-app
  CONTAINER_NAME_NGINX: nginx

jobs:
  # 테스트 잡은 이전과 동일하게 유지
  run-tests:
    # ... (이전과 동일한 내용) ...

  build-and-deploy:
    name: Build, Push to ECR, and Deploy to ECS
    needs: run-tests
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # [변경] Docker Hub가 아닌 AWS ECR에 로그인합니다.
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # [변경] 백엔드 이미지를 빌드하고 ECR에 푸시합니다.
      - name: Build and push backend image to Amazon ECR
        id: build-image-backend
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest" >> $GITHUB_OUTPUT
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # [변경] Nginx 이미지를 빌드하고 ECR에 푸시합니다.
      - name: Build and push nginx image to Amazon ECR
        id: build-image-nginx
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:latest ./nginx
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_NGINX:latest" >> $GITHUB_OUTPUT
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # [변경] SSM 액션 대신 ECS 배포 액션을 사용합니다.
      # 이 액션은 task-definition.json 파일을 기반으로 새로운 버전을 배포합니다.
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME_BACKEND }}
          image: ${{ steps.build-image-backend.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true # 배포가 안정될 때까지 기다립니다.
