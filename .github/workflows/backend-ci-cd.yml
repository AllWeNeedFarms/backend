name: Backend CI/CD with Conditional Tests

# 워크플로우 실행 조건 정의
on:
  push:
    # 1. main 브랜치에 push 되었을 때
    branches: ["main"]
    # 2. 'test-'로 시작하는 태그(예: test-v1.0)가 push 되었을 때
    tags: ["test-**"]

jobs:
  # ===============================================
  # JOB 1: 조건부 테스트 실행 잡
  # ===============================================
  run-tests:
    name: Run Tests
    # 'test-'로 시작하는 태그가 push되었을 때만 이 잡을 실행합니다.
    # github.ref 컨텍스트는 현재 실행을 트리거한 브랜치나 태그의 전체 경로를 담고 있습니다.
    # (예: 'refs/tags/test-v1.0')
    if: startsWith(github.ref, 'refs/tags/test-')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # 테스트에는 devDependencies가 필요하므로 --production 없이 설치합니다.
      - name: Install all dependencies
        run: npm install

      # 'npm test' 스크립트를 실행합니다. (package.json에 정의되어 있어야 함)
      - name: Execute tests
        run: npm test

  # ===============================================
  # JOB 2: 빌드 및 배포 잡
  # ===============================================
  build-and-deploy:
    name: Build and Deploy
    # 'run-tests' 잡이 끝난 후에 실행되도록 의존성을 설정합니다.
    needs: run-tests
    # 'always()' 함수 덕분에 'run-tests' 잡이 스킵되어도(main 브랜치 푸시) 이 잡은 실행됩니다.
    # 그리고 'run-tests' 잡이 실패하면 이 잡은 실행되지 않습니다.
    # 즉, (main 브랜치 푸시 OR 테스트 성공)일 때만 배포가 진행됩니다.
    if: always()
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # --- Docker 이미지 빌드, 푸시, 배포 과정은 이전과 동일 ---
      # 2. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          # .dockerignore 덕분에 테스트 코드는 이 단계에서 제외됩니다.
          push: true
          # 빌드 후 이미지를 푸시합니다.
          # 태그를 더 동적으로 관리할 수 있습니다. 예를 들어 latest와 git-sha를 같이 씁니다.
          tags: jeehokim/allweneedfarm-backend:latest

      # 4. AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 5. EC2에 배포 명령 전송 (SSM Run Command 사용)
      - name: Deploy to EC2 instance
        uses: aws-actions/amazon-ssm-send-command@v1
        with:
          instance-ids: ${{ secrets.AWS_EC2_INSTANCE_ID }}
          working-directory: /home/ec2-user/backend # EC2 내 프로젝트 경로
          command: |
            docker-compose pull
            docker-compose up -d --no-deps --build node-app
